# D√πng ƒë·ªÉ deploy tr·ª±c ti·∫øp l√™n Streamlit Cloud

import streamlit as st
import uuid
import os
import json
from PIL import Image
from io import BytesIO
import Check_single as check_ransom_benign
import Check_single_ransome_mal as check_ransom_mal

# C√°c th∆∞ m·ª•c l∆∞u file
UPLOAD_FOLDER = "analyze"
REPORT_FOLDER = "checkfile/reports"
PLOT_FOLDER = "checkfile/plots"

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(REPORT_FOLDER, exist_ok=True)
os.makedirs(PLOT_FOLDER, exist_ok=True)

# Giao di·ªán
st.title("üõ°Ô∏è Ransomware Analyzer")
analysis_type = st.selectbox("Ch·ªçn lo·∫°i ph√¢n t√≠ch:", ["Ransomware and Benign", "Ransomware and Malware"])
input_type = st.selectbox("Ch·ªçn ki·ªÉu file ƒë·∫ßu v√†o:", ["execute", "report", "attribute"])

# T·∫£i file
if input_type == "execute":
    uploaded_file = st.file_uploader("T·∫£i l√™n file .exe")
else:
    uploaded_file = st.file_uploader("T·∫£i l√™n file JSON", type=["json"])

if uploaded_file and st.button("Ph√¢n t√≠ch"):
    # T·∫°o filename ng·∫´u nhi√™n
    filename = f"{uuid.uuid4()}_{uploaded_file.name}"
    filepath = os.path.join(UPLOAD_FOLDER, filename)
    
    # L∆∞u file upload
    with open(filepath, "wb") as f:
        f.write(uploaded_file.getbuffer())

    # Ch·ªçn module
    module = check_ransom_benign if analysis_type == "Ransomware and Benign" else check_ransom_mal

    try:
        if input_type == "execute":
            task_id = module.submit_sample(filepath)
            module.wait_for_report(task_id)

            report_path = os.path.join(REPORT_FOLDER, f"report_{filename}.json")
            module.download_report(task_id, report_path)

            attr_path = os.path.join(REPORT_FOLDER, f"attributes_{filename}.json")
            module.extract_fields(report_path, attr_path)

        elif input_type == "report":
            attr_path = os.path.join(REPORT_FOLDER, f"attributes_{filename}.json")
            module.extract_fields(filepath, attr_path)

        elif input_type == "attribute":
            attr_path = filepath

        else:
            st.error("‚ùå Ki·ªÉu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá")
            st.stop()

        # Ph√¢n t√≠ch model
        result = module.check_and_explain(attr_path)
        if result is None or result[0] == "Invalid":
            st.error("‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá")
            st.stop()

        label, confidence, lime_result = result

        # V·∫Ω LIME
        plot_filename = f"plot_{uuid.uuid4()}.png"
        plot_path = os.path.join(PLOT_FOLDER, plot_filename)
        module.plot_lime_top_5_5_to_file(lime_result, filename, label, confidence, save_path=plot_path)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.success("‚úÖ Ph√¢n t√≠ch th√†nh c√¥ng")
        st.markdown(f"### üîñ Nh√£n: **{label}**")
        st.markdown(f"**ƒê·ªô tin c·∫≠y:** {confidence:.4f}")

        st.markdown("### üîç Top LIME features:")
        for tok, w in lime_result:
            st.markdown(f"- `{tok}`: **{w:.4f}**")

        # Hi·ªÉn th·ªã ·∫£nh
        with open(plot_path, "rb") as f:
            img = Image.open(BytesIO(f.read()))
            st.image(img, caption="Bi·ªÉu ƒë·ªì LIME")

    except Exception as e:
        st.error(f"‚ùå L·ªói: {e}")
